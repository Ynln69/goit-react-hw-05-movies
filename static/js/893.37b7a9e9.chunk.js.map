{"version":3,"file":"static/js/893.37b7a9e9.chunk.js","mappings":"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","sources":["api/moviesAPI.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/MovieDetails/MovieDetails.styled.js","components/MovieInfo/MovieInfo.styled.js","components/MovieInfo/MovieInfo.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, release_date, vote_average, poster_path }) => ({\n    id,\n    title,\n    release_date,\n    rating: vote_average.toFixed(1),\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : `https://thumbs.dreamstime.com/b/%D0%B8-%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF-%D0%B0%D0%BA%D0%B0%D1%82%D0%B0-%D0%BA%D0%B8%D0%BD%D0%BE-48746594.jpg`,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : `https://you-anime.ru/anime-images/characters/WNbWU2vEyeW5hAyO.jpg`,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n    userName: author_details.username,\n    avatar:\n      author_details.avatar_path &&\n      author_details.avatar_path.startsWith('/http')\n        ? author_details.avatar_path.slice(1, author_details.avatar_path.length)\n        : `https://image.tmdb.org/t/p/w500${author_details.avatar_path}`,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderBox = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { MutatingDots } from 'react-loader-spinner';\nimport { LoaderBox } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderBox>\n      <MutatingDots\n        height=\"100\"\n        width=\"100\"\n        color=\"#ffd700\"\n        secondaryColor=\"#ffd700\"\n        radius=\"12.5\"\n        ariaLabel=\"mutating-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </LoaderBox>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 20px;\n  align-items: center;\n  justify-content: space-around;\n  margin-bottom: 50px;\n`;\nexport const AdditionalInfoLink = styled(NavLink)`\n  padding: 14px 32px;\n  border-radius: 4px;\n\n  color: #ffd700;\n  font-weight: 500;\n  font-size: 20px;\n  text-decoration: none;\n  text-align: center;\n  text-transform: uppercase;\n\n  &.active {\n    color: white;\n    background-color: #ffd700;\n    box-shadow: 0px 0px 7px rgba(27, 27, 27, 0.15);\n    border-radius: 100px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const MovieInfoTitle = styled.h1`\n  margin-bottom: 20px;\n  font-size: 30px;\n`;\n\nexport const MovieInfoBox = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 35px;\n  > img {\n    width: 370px;\n    height: 450px;\n  }\n`;\n\nexport const MovieInfoTd = styled.td`\n  width: 137px;\n  > h2 {\n    font-size: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { MovieInfoBox, MovieInfoTitle, MovieInfoTd } from './MovieInfo.styled';\n\nconst MovieInfo = ({ movie }) => {\n  return (\n    <>\n      <MovieInfoTitle>{movie.title}</MovieInfoTitle>\n      <MovieInfoBox>\n        <img src={movie.poster} alt={movie.title} />\n        <table>\n          <tbody>\n            <tr>\n              <MovieInfoTd>\n                <h2>Rating</h2>\n              </MovieInfoTd>\n              <td>{movie.rating}</td>\n            </tr>\n            <tr>\n              <MovieInfoTd>\n                <h2>Slogan</h2>\n              </MovieInfoTd>\n              <td>\"{movie.tagline}\"</td>\n            </tr>\n            <tr>\n              <MovieInfoTd>\n                <h2>Release date</h2>\n              </MovieInfoTd>\n              <td>{movie.date}</td>\n            </tr>\n            <tr>\n              <MovieInfoTd>\n                <h2>Country</h2>\n              </MovieInfoTd>\n              <td>{movie.countries}</td>\n            </tr>\n            <tr>\n              <MovieInfoTd>\n                <h2>Genre</h2>\n              </MovieInfoTd>\n              <td>{movie.genres}</td>\n            </tr>\n            <tr>\n              <MovieInfoTd>\n                <h2>Overview</h2>\n              </MovieInfoTd>\n              <td>{movie.overview}</td>\n            </tr>\n          </tbody>\n        </table>\n      </MovieInfoBox>\n    </>\n  );\n};\n\nMovieInfo.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n\nexport default MovieInfo;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState, Suspense } from 'react';\nimport { fetchMoviesById } from 'api/moviesAPI';\nimport { useParams, Outlet } from 'react-router-dom';\nimport { CastList, AdditionalInfoLink } from './MovieDetails.styled';\nimport Loader from 'components/Loader/Loader';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport BackLink from 'components/BackLink/BackLink';\n\nconst MoviesDetails = () => {\n  const [movie, setMovie] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieById = async () => {\n      try {\n        const respons = await fetchMoviesById(movieId);\n        const data = respons.data;\n\n        const objectMovie = {\n          poster: data.poster_path\n            ? `https://image.tmdb.org/t/p/w500${data.poster_path}`\n            : `https://thumbs.dreamstime.com/b/%D0%B8-%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF-%D0%B0%D0%BA%D0%B0%D1%82%D0%B0-%D0%BA%D0%B8%D0%BD%D0%BE-48746594.jpg`,\n          title: data.title,\n          rating: data.vote_average.toFixed(1),\n          tagline: data.tagline,\n          date: data.release_date,\n          countries: data.production_countries\n            .map(({ name }) => name)\n            .join(', '),\n          genres: data.genres.map(({ name }) => name).join(', '),\n          overview: data.overview,\n        };\n        setMovie(objectMovie);\n      } catch (error) {\n        console.error(error);\n        Notiflix.Notify.failure('Error fetching movies');\n        setMovie({});\n      }\n    };\n    getMovieById();\n  }, [movieId]);\n\n  return (\n    <main>\n      <BackLink />\n      {Boolean(Object.keys(movie).length) && (\n        <>\n          <MovieInfo movie={movie} />\n          <CastList>\n            <li>\n              <AdditionalInfoLink to=\"trailer\">Trailer</AdditionalInfoLink>\n            </li>\n            <li>\n              <AdditionalInfoLink to=\"cast\">Cast</AdditionalInfoLink>\n            </li>\n            <li>\n              <AdditionalInfoLink to=\"reviews\">Reviews</AdditionalInfoLink>\n            </li>\n          </CastList>\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </main>\n  );\n};\n\nexport default MoviesDetails;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","release_date","vote_average","poster_path","rating","toFixed","poster","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","userName","username","avatar","avatar_path","startsWith","slice","length","fetchTrailerVideo","LoaderBox","styled","height","width","color","secondaryColor","radius","ariaLabel","wrapperStyle","wrapperClass","visible","CastList","AdditionalInfoLink","NavLink","MovieInfoTitle","MovieInfoBox","MovieInfoTd","movie","src","alt","tagline","date","countries","genres","overview","useState","setMovie","useParams","useEffect","getMovieById","respons","data","objectMovie","production_countries","join","BackLink","Boolean","Object","keys","to","Suspense","fallback","Loader"],"sourceRoot":""}