{"version":3,"file":"static/js/65.d0de03c5.chunk.js","mappings":"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","sources":["api/moviesAPI.jsx","components/Reviews/Reviews.styled.js","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","components/Trailer/Trailer.jsx"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, release_date, vote_average, poster_path }) => ({\n    id,\n    title,\n    release_date,\n    rating: vote_average.toFixed(1),\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : `https://thumbs.dreamstime.com/b/%D0%B8-%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF-%D0%B0%D0%BA%D0%B0%D1%82%D0%B0-%D0%BA%D0%B8%D0%BD%D0%BE-48746594.jpg`,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : `https://you-anime.ru/anime-images/characters/WNbWU2vEyeW5hAyO.jpg`,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n    userName: author_details.username,\n    avatar:\n      author_details.avatar_path &&\n      author_details.avatar_path.startsWith('/http')\n        ? author_details.avatar_path.slice(1, author_details.avatar_path.length)\n        : `https://image.tmdb.org/t/p/w500${author_details.avatar_path}`,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n\n  > li {\n    padding: 15px;\n    display: flex;\n    gap: 10px;\n    border-bottom: 1px solid black;\n    flex-direction: column;\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n    background-color: rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(2px);\n    border-radius: 5px;\n    > div {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      > img {\n        border-radius: 50%;\n      }\n    }\n  }\n`;\n\nexport const ErrorMessege = styled.p`\n  font-size: 36px;\n  text-align: center;\n  padding: 20px;\n  font-weight: 800;\n`;\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalContainer = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n\nexport const ModalBtn = styled.button`\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  right: 25px;\n  top: 75px;\n  cursor: pointer;\n  border-radius: 23%;\n  border: none;\n  color: yellow;\n  background-color: #3f51b5;\n  font-size: 10px;\n  font-weight: 700;\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { Overlay, ModalContainer, ModalBtn } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ children, onClose }) => {\n  useEffect(() => {\n    const handelKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handelKeyDown);\n    return () => document.removeEventListener('keydown', handelKeyDown);\n  });\n\n  const handelBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  const handelButtonClick = () => {\n    onClose();\n  };\n\n  return createPortal(\n    <Overlay onClick={handelBackdropClick}>\n      <ModalBtn type=\"button\" onClick={handelButtonClick}>\n        X\n      </ModalBtn>\n      <ModalContainer>{children}</ModalContainer>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\nexport default Modal;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Modal from 'components/Modal/Modal';\nimport { fetchTrailerVideo } from 'api/moviesAPI';\nimport { ErrorMessege } from 'components/Reviews/Reviews.styled';\n\nconst Trailer = () => {\n  const [showModal, setShowModal] = useState(true);\n  const [video, setVideos] = useState({});\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getTrailerVideo = async () => {\n      try {\n        const {\n          data: { results },\n        } = await fetchTrailerVideo(movieId);\n\n        setVideos(results[0]);\n\n        return video;\n      } catch (e) {\n        console.error(e);\n        Notiflix.Notify.failure('Error fetching reviews');\n      }\n    };\n    getTrailerVideo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const closeModal = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <div>\n      {showModal && (\n        <Modal onClose={closeModal}>\n          {!video ? (\n            <ErrorMessege>Oops there're no video to this movie</ErrorMessege>\n          ) : (\n            <iframe\n              width=\"680\"\n              height=\"400\"\n              src={`https://www.youtube.com/embed/${video.key}`}\n              title=\"YouTube video player\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n              allowFullScreen\n            ></iframe>\n          )}\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default Trailer;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","release_date","vote_average","poster_path","rating","toFixed","poster","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","userName","username","avatar","avatar_path","startsWith","slice","length","fetchTrailerVideo","ReviewsList","styled","ErrorMessege","Overlay","ModalContainer","ModalBtn","modalRoot","document","querySelector","children","onClose","useEffect","handelKeyDown","e","code","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","type","useState","showModal","setShowModal","video","setVideos","useParams","getTrailerVideo","results","data","width","height","src","key","frameBorder","allow","allowFullScreen"],"sourceRoot":""}