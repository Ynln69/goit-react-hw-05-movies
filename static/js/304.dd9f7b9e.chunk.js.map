{"version":3,"file":"static/js/304.dd9f7b9e.chunk.js","mappings":"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","sources":["api/moviesAPI.jsx","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, release_date, vote_average, poster_path }) => ({\n    id,\n    title,\n    release_date,\n    rating: vote_average.toFixed(1),\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : `https://thumbs.dreamstime.com/b/%D0%B8-%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF-%D0%B0%D0%BA%D0%B0%D1%82%D0%B0-%D0%BA%D0%B8%D0%BD%D0%BE-48746594.jpg`,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : `https://you-anime.ru/anime-images/characters/WNbWU2vEyeW5hAyO.jpg`,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n    userName: author_details.username,\n    avatar:\n      author_details.avatar_path &&\n      author_details.avatar_path.startsWith('/http')\n        ? author_details.avatar_path.slice(1, author_details.avatar_path.length)\n        : `https://image.tmdb.org/t/p/w500${author_details.avatar_path}`,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const ListOfMovies = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  margin-top: 10px;\n\n  > li {\n    flex-basis: calc((100% - 4 * 16px) / 5);\n    border-radius: 10px;\n    overflow: hidden;\n    &:hover {\n      filter: drop-shadow(0px 4px 16px rgba(0, 0, 0, 0.45));\n    }\n  }\n`;\n\nexport const Link = styled(NavLink)`\n  display: flex;\n  color: currentColor;\n  text-decoration: none;\n  flex-direction: column;\n`;\n\nexport const ItemBox = styled.div`\n  position: relative;\n  padding: 10px;\n  display: flex;\n  gap: 4px;\n  align-items: stretch;\n  flex-direction: column;\n`;\nexport const Rating = styled.div`\n  position: absolute;\n  top: -25px;\n  left: 5px;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  box-shadow: 1px 1px 20px #ffd700;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  color: #fff;\n  background-color: #483d8b;\n`;\n\nexport const TitleMovie = styled.h2`\n  margin-top: 15px;\n  font-size: 19px;\n  color: #dcdcdc;\n`;\n\nexport const ReleaseMovie = styled.p`\n  font-size: 17px;\n  color: #dcdcdc;\n  opacity: 0.8;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  Link,\n  TitleMovie,\n  ReleaseMovie,\n  ItemBox,\n  Rating,\n  ListOfMovies,\n} from 'components/MoviesList/MoviesList.styled';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ListOfMovies>\n      {movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            <img src={movie.poster} alt={movie.title} />\n            <ItemBox>\n              <Rating>\n                <b>{movie.rating}</b>\n              </Rating>\n              <TitleMovie>{movie.title}</TitleMovie>\n              <ReleaseMovie>{movie.release_date}</ReleaseMovie>\n            </ItemBox>\n          </Link>\n        </li>\n      ))}\n    </ListOfMovies>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      rating: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\nexport default MoviesList;\n","import styled from '@emotion/styled';\n\nexport const HomeContainer = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 25px;\n`;\n\nexport const HomeTitle = styled.h1`\n  margin-top: 20px;\n\n  color: #dcdcdc;\n  text-transform: uppercase;\n`;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { normalizeMoviesList, fetchTrendingMovies } from 'api/moviesAPI';\nimport { HomeContainer, HomeTitle } from './Home.styled';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    try {\n      const getTrendingMovies = async () => {\n        const {\n          data: { results },\n        } = await fetchTrendingMovies();\n\n        setMovies(normalizeMoviesList(results));\n      };\n\n      getTrendingMovies();\n    } catch (error) {\n      console.error(error);\n      Notiflix.Notify.failure('Error fetching movies');\n    }\n  }, []);\n\n  return (\n    <HomeContainer>\n      <HomeTitle>Trending today</HomeTitle>\n      <MoviesList movies={movies} />\n    </HomeContainer>\n  );\n};\nexport default Home;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","release_date","vote_average","poster_path","rating","toFixed","poster","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","userName","username","avatar","avatar_path","startsWith","slice","length","fetchTrailerVideo","ListOfMovies","styled","Link","NavLink","ItemBox","Rating","TitleMovie","ReleaseMovie","movies","location","useLocation","movie","to","state","from","src","alt","HomeContainer","HomeTitle","useState","setMovies","useEffect","getTrendingMovies","results","data","MoviesList"],"sourceRoot":""}