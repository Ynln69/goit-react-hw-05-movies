{"version":3,"file":"static/js/387.215fa257.chunk.js","mappings":"saAGaA,EAAU,mCAEVC,EAAmB,mCAAG,uGAElBC,EAAAA,EAAAA,IAAA,kEACgDF,IAH9B,wEAM/BG,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,yBAPO,yDAAH,qDAWnBC,EAAgB,mCAAG,WAAMC,GAAN,0FAEfL,EAAAA,EAAAA,IAAA,4DAC0CF,EAD1C,iCAC0EO,EAD1E,YAFe,wEAM5BJ,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,yBAPI,yDAAH,sDAWhBG,EAAsB,SAAAC,GACjC,OAAOA,EAAIC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,YAA1C,MAA6D,CAC1EJ,GAAAA,EACAC,MAAAA,EACAC,aAAAA,EACAG,OAAQF,EAAaG,QAAQ,GAC7BC,OAAQH,EAAW,yCACmBA,GADnB,sKALN,GAShB,EAEYI,EAAe,mCAAG,WAAMC,GAAN,0FAEdlB,EAAAA,EAAAA,IAAA,6CAC2BkB,EAD3B,oBAC8CpB,EAD9C,oBAFc,wEAM3BG,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,wBAPG,yDAAH,sDAWfgB,EAAa,mCAAG,WAAMD,GAAN,0FAEZlB,EAAAA,EAAAA,IAAA,6CAC2BkB,EAD3B,4BACsDpB,EADtD,oBAFY,wEAMzBG,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,uBAPC,yDAAH,sDAWbiB,EAAiB,SAAAb,GAC5B,OAAOA,EAAIC,KAAI,gBAAGa,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,aAA7B,MAAiD,CAC9Df,GAAIY,EACJC,UAAAA,EACAC,KAAAA,EACAE,MAAOD,EAAY,yCACmBA,GADnB,oEAJN,GAQhB,EAEYE,EAAY,mCAAG,WAAMR,GAAN,0FAEXlB,EAAAA,EAAAA,IAAA,6CAC2BkB,EAD3B,4BACsDpB,EADtD,2BAFW,wEAMxBG,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,0BAPA,yDAAH,sDAWZwB,EAAoB,SAAApB,GAC/B,OAAOA,EAAIC,KAAI,gBAAGC,EAAH,EAAGA,GAAImB,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,eAAhB,MAA8C,CAC3DpB,GAAAA,EACAqB,OAFa,EAAgCA,OAG7CF,QAAAA,EACAG,SAAUF,EAAeG,SACzBC,OACEJ,EAAeK,aACfL,EAAeK,YAAYC,WAAW,SAClCN,EAAeK,YAAYE,MAAM,EAAGP,EAAeK,YAAYG,QAFnE,yCAGsCR,EAAeK,aAT1C,GAWhB,EAEYI,EAAiB,mCAAG,WAAMpB,GAAN,0FAEhBlB,EAAAA,EAAAA,IAAA,6CAC2BkB,EAD3B,2BACqDpB,EADrD,oBAFgB,wEAM7BG,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,0BAPK,yDAAH,qD,uLC/FjBoC,EAAWC,EAAAA,EAAAA,GAAH,+PAcRC,EAAcD,EAAAA,EAAAA,IAAH,oZ,kBCiCxB,EA1Ca,WACX,OAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQ1B,GAAY2B,EAAAA,EAAAA,MAAZ3B,QAmBR,OAjBA4B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,gHAIN5B,EAAAA,EAAAA,IAAcD,GAJR,gBAGN8B,EAHM,EAGdC,KAAQD,KAGVJ,GAAYxB,EAAAA,EAAAA,IAAe4B,IANX,gDAQhB/C,QAAQC,MAAR,MACAC,IAAAA,OAAAA,QAAwB,uBATR,yDAAH,qDAajB4C,GACD,GAAE,CAAC7B,KAGF,SAACqB,EAAD,UACII,EAASN,OAGTM,EAASnC,KAAI,YAAqC,IAAlCC,EAAiC,EAAjCA,GAAIa,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,KAAME,EAAY,EAAZA,MACnC,OACE,2BACE,gBAAKyB,IAAKzB,EAAO0B,IAAK5B,KACtB,UAACkB,EAAD,YACE,wBAAKlB,KACL,uBAAID,SAJCb,EAQZ,KAZD,SAAC,IAAD,yCAgBP,C,wGC7CY2C,EAAcZ,EAAAA,EAAAA,GAAH,glBA8BXa,EAAeb,EAAAA,EAAAA,EAAH,yG","sources":["api/moviesAPI.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.js"],"sourcesContent":["import axios from 'axios';\nimport Notiflix from 'notiflix';\n\nexport const API_KEY = 'bb95fe38b7df9f87f0ecf707b6f0bb8b';\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const fetchQueryMovies = async querySearch => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${querySearch}&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movies');\n  }\n};\n\nexport const normalizeMoviesList = arr => {\n  return arr.map(({ id, title, release_date, vote_average, poster_path }) => ({\n    id,\n    title,\n    release_date,\n    rating: vote_average.toFixed(1),\n    poster: poster_path\n      ? `https://image.tmdb.org/t/p/w500${poster_path}`\n      : `https://thumbs.dreamstime.com/b/%D0%B8-%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF-%D0%B0%D0%BA%D0%B0%D1%82%D0%B0-%D0%BA%D0%B8%D0%BD%D0%BE-48746594.jpg`,\n  }));\n};\n\nexport const fetchMoviesById = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching movie');\n  }\n};\n\nexport const fetchCastInfo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching cast');\n  }\n};\n\nexport const normalizedCast = arr => {\n  return arr.map(({ cast_id, character, name, profile_path }) => ({\n    id: cast_id,\n    character,\n    name,\n    photo: profile_path\n      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n      : `https://you-anime.ru/anime-images/characters/WNbWU2vEyeW5hAyO.jpg`,\n  }));\n};\n\nexport const fetchReviews = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n  } catch (error) {\n    console.error(error);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n\nexport const normalizedReviews = arr => {\n  return arr.map(({ id, content, author_details, author }) => ({\n    id,\n    author,\n    content,\n    userName: author_details.username,\n    avatar:\n      author_details.avatar_path &&\n      author_details.avatar_path.startsWith('/http')\n        ? author_details.avatar_path.slice(1, author_details.avatar_path.length)\n        : `https://image.tmdb.org/t/p/w500${author_details.avatar_path}`,\n  }));\n};\n\nexport const fetchTrailerVideo = async movieId => {\n  try {\n    return await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`\n    );\n  } catch (e) {\n    console.error(e);\n    Notiflix.Notify.failure('Error fetching reviews');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin-top: 10px;\n  > li {\n    display: flex;\n    flex-direction: column;\n    flex-basis: calc((100% - 8 * 10px) / 9);\n    border-radius: 5px;\n    overflow: hidden;\n  }\n`;\n\nexport const CastInfoBox = styled.div`\n  display: flex;\n  padding: 4px;\n  flex-direction: column;\n  gap: 5px;\n  flex-grow: 1;\n\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n  background-color: rgba(218, 165, 32);\n  color: #000;\n  text-align: center;\n  > h3 {\n    font-size: 14px;\n  }\n  > p {\n    text-decoration-line: overline;\n    font-style: italic;\n    font-size: 12px;\n    opacity: 0.7;\n  }\n`;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastInfo, normalizedCast } from 'api/moviesAPI';\nimport { CastList, CastInfoBox } from './Cast.styled';\nimport { ErrorMessege } from 'components/Reviews/Reviews.styled';\n\nconst Cast = () => {\n  const [castList, setCastList] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCastInfo = async () => {\n      try {\n        const {\n          data: { cast },\n        } = await fetchCastInfo(movieId);\n\n        setCastList(normalizedCast(cast));\n      } catch (error) {\n        console.error(error);\n        Notiflix.Notify.failure('Error fetching cast');\n      }\n    };\n\n    getCastInfo();\n  }, [movieId]);\n\n  return (\n    <CastList>\n      {!castList.length ? (\n        <ErrorMessege>Not found info about cast</ErrorMessege>\n      ) : (\n        castList.map(({ id, character, name, photo }) => {\n          return (\n            <li key={id}>\n              <img src={photo} alt={name} />\n              <CastInfoBox>\n                <h3>{name}</h3>\n                <p>{character}</p>\n              </CastInfoBox>\n            </li>\n          );\n        })\n      )}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n\n  > li {\n    padding: 15px;\n    display: flex;\n    gap: 10px;\n    border-bottom: 1px solid black;\n    flex-direction: column;\n    box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n    background-color: rgba(0, 0, 0, 0.3);\n    backdrop-filter: blur(2px);\n    border-radius: 5px;\n    > div {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      > img {\n        border-radius: 50%;\n      }\n    }\n    > p {\n      cursor: pointer;\n      text-overflow: ellipsis;\n    }\n  }\n`;\n\nexport const ErrorMessege = styled.p`\n  font-size: 36px;\n  text-align: center;\n  padding: 20px;\n  font-weight: 800;\n`;\n"],"names":["API_KEY","fetchTrendingMovies","axios","console","error","Notiflix","fetchQueryMovies","querySearch","normalizeMoviesList","arr","map","id","title","release_date","vote_average","poster_path","rating","toFixed","poster","fetchMoviesById","movieId","fetchCastInfo","normalizedCast","cast_id","character","name","profile_path","photo","fetchReviews","normalizedReviews","content","author_details","author","userName","username","avatar","avatar_path","startsWith","slice","length","fetchTrailerVideo","CastList","styled","CastInfoBox","useState","castList","setCastList","useParams","useEffect","getCastInfo","cast","data","src","alt","ReviewsList","ErrorMessege"],"sourceRoot":""}